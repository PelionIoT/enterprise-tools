{
    "VirtualDevicecreate": {
        "Usage": "VirtualDevicecreate [device name]", 
        "Example": "VirtualDevicecreate LightBulb ",
        "Description": "Create new device controller from available templates. It returns the resourceID on which new device controller is created."
    },
    "VirtualDeviceslist": {
        "Usage": "VirtualDeviceslist", 
        "Example": "VirtualDeviceslist",
        "Description": "List created virtual device controller's resourceIDs."
    },
    "VirtualDeviceTemplateslist": {
        "Usage": "VirtualDeviceTemplateslist", 
        "Example": "VirtualDeviceTemplateslist ",
        "Description": "List available virtual devices templates."
    },
    "VirtualDevicestop": {
        "Usage": "VirtualDevicestop [resourceID]", 
        "Example": "VirtualDevicestop VirtualLightBulb1",
        "Description": "To stop running device controller. It takes valid resourceID as argument."
    },
    "VirtualDevicedelete": {
        "Usage": "VirtualDevicedelete [resourceID]", 
        "Example": "VirtualDevicedelete VirtualLightBulb1",
        "Description": "To stop and forget a virtual device controller."
    },
    "VirtualDevicesdeleteAll": {
        "Usage": "VirtualDevicesdeleteAll", 
        "Example": "VirtualDevicesdeleteAll ",
        "Description": "Deletes all the virtual device controllers."
    },
    "help": {
        "Usage": "help or help [command]", 
        "Example": "help or help VirtualDevicesdeleteAll",
        "Description": "Provide help for each command."
    },
    "set-accountid": {
        "Usage": "set-accountid [accountID]", 
        "Example": "set-accountid d55fa29dbad3418883374168ba4791fd",
        "Description": "Sets the active account for the shell to use."
    },
    "set-siteid": {
        "Usage": "set-siteid [siteID]", 
        "Example": "set-siteid b34c748c4adb4f72b56b213e14161992",
        "Description": "Sets the site ID for the shell to use."
    },
    "modbusDeleteAll": {
        "Usage": "modbusDeleteAll", 
        "Example": "modbusDeleteAll",
        "Description": "To delete all modbus devices."
    },
    "getDiagnostics": {
        "Usage": "getDiagnostics", 
        "Example": "getDiagnostics",
        "Description": "Gives information about Relay."
    },
    "zigbeeStartPairing": {
        "Usage": "zigbeeStartPairing", 
        "Example": "zigbeeStartPairing",
        "Description": "to pair zigbee devices."
    },
    "zwaveStartPairing": {
        "Usage": "zwaveStartPairing", 
        "Example": "zwaveStartPairing",
        "Description": "To pair zwave devices."
    },
    "6lowpanStartPairing": {
        "Usage": "6lowpanStartPairing [filamentID]", 
        "Example": "6lowpanStartPairing WWFL00022Q",
        "Description": "To pair wigwag filament over IP."
    },
    "getAllDevicesNames": {
        "Usage": "getAllDevicesNames", 
        "Example": "getAllDevicesNames",
        "Description": ""
    },
    "bacnetActivityLog": {
        "Usage": "bacnetActivityLog", 
        "Example": "bacnetActivityLog",
        "Description": "To find the activity of bacnet device."
    },
    "bacnetGetAllDeviceStates": {
        "Usage": "bacnetGetAllDeviceStates", 
        "Example": "bacnetGetAllDeviceStates",
        "Description": "Get all bacnet device current state."
    },
    "bacnetSendWhoIs": {
        "Usage": "bacnetSendWhoIs", 
        "Example": "bacnetSendWhoIs",
        "Description": "Send whoIs service request on bacnet line."
    },
    "bacnetDeleteAll": {
        "Usage": "bacnetDeleteAll", 
        "Example": "bacnetDeleteAll",
        "Description": "Delete all bacnet device controllers"
    },
    "set-siteid-as-accountid": {
        "Usage": "set-siteid-as-accountid", 
        "Example": "set-siteid-as-accountid",
        "Description": "set siteID equal to the accountID"
    },
    "show-responses": {
        "Usage": "show-responses", 
        "Example": "show-responses",
        "Description": "shows pending requests"
    },
    "poller-status": {
        "Usage": "poller-status {status} {if on than time in ms for pole}", 
        "Example": "poller-status on 200", 
        "Description": "to pole the status"
    },
    "createSiteGroup": {
        "Usage": "createSiteGroup {group name} {option} {siteID}", 
        "Example": "createSiteGroup X-group add b555427547128547157415284518745xxxx",
        "Description": "creats a group of sites"
    },
    "getSiteGroup": {
        "Usage": "getSiteGroup {group name (optional)}", 
        "Example": "getSiteGroup India",
        "Description": "information about site group"
    },
    "getAllSiteGroups": {
        "Usage": "getAllSiteGroups", 
        "Example": "getAllSiteGroups",
        "Description": "Get all site groups"
    },
    "deleteSiteGroup": {
        "Usage": "deleteSiteGroup {group name}", 
        "Example": "deleteSiteGroup India",
        "Description": "Delete a particular group"
    },
    "subscribeToEvents": {
        "Usage": "subscribeToEvents", 
        "Example": "subscribeToEvents",
        "Description": "subscribe To Events get update"
    },
    "createRole": {
        "Usage": "createRole {name} {accountID}", 
        "Example": "createRole XYZ d55hvdhhvdqjhvdbiqwjkvdi}",
        "Description": "craete a role for particular account"
    },
    "getaRole": {
        "Usage": "getaRole {roleID", 
        "Example": "getaRole fveuhfvewjbvffivkebrhkb",
        "Description": "Gives details of a particular role"
    },
    "getRoles": {
        "Usage": "getRoles {userID} {accountID} {name}",
        "Example":"",
        "Description": "Get all roles"
    },
    "createGroup": {
        "Usage": "createGroup {resource group name}", 
        "Example": "createGroup Kitchen",
        "Description": "creates a group of resources"
    },
    "deleteaRole": {
        "Usage": "deleteaRole {roleID}", 
        "Example": "deleteaRole ywbefyw63rydvbe3uf43w7f8",
        "Description": "delete a particular role"
    },
    "updateGroup": {
        "Usage": "updateGroup {resource group location} {add/remove} {resourceID}", 
        "Example": "updateGroup Kitchen add VirtualThermostat1125",
        "Description": "add or remove the devices from a resource group"
    },
    "getGroup": {
        "Usage": "getGroup {group location}", 
        "Example": "getGroup kitchen",
        "Description": "gives details of the resiurce group"
    },
    "deleteGroup": {
        "Usage": "deleteGroup {resource group location}", 
        "Example": "deleteGroup badroom",
        "Description": "delete the resource group"
    },
    "modbusStart": {
        "Usage": "modbusStart {path of the modbus receipies in json", 
        "Example": "modbusStart /pathtofile/file.json",
        "Description": "publish modbus receipes on relay"
    },
    "modbusGetDeviceMetadata": {
        "Usage": "modbusGetDeviceMetadata", 
        "Example": "modbusGetDeviceMetadata",
        "Description": "gives all the device meta data like its state, address and facede etc."
    },
    "modbusListDevices": {
        "Usage": "modbusListDevices", 
        "Example": "modbusListDevices",
        "Description": "list all the devices connected to the Imod6"
    },
    "modbusLogLevel": {
        "Usage": "modbusLogLevel {1 to 5}",
        "Example":"",
        "Description": "gives log information of a modbus device"
    },
    "modbusGetAllDeviceStates ": {
        "Usage": "modbusGetAllDeviceStates", 
        "Example": "modbusGetAllDeviceStates",
        "Description": "gives state of each device "
    },
    "modbusConfiguration": {
        "Usage": "modbusConfiguration", 
        "Example": "modbusConfiguration",
        "Description": "gives the modbusConfiguration of Imod6"
    },
    "startTunnel": {
        "Usage": "startTunnel", 
        "Example": "startTunnel",
        "Description": "used to login into relay when you are not in local network"
    },
    "postRequests": {
        "Usage": "postRequests [selection][command] [type] [property] [argument] [value]", 
        "Example": "postRequests id=-------- create call null Button",
        "Description": "return your reque"
    },
    "getHistory": {
        "Usage": "node index.js -c [cloud] -u [user ID] -p [password] -a [accountID] -s [siteID] getHistory",
        "Example":"",
        "Description": "gives history of a device"
    },
    "getRelays": {
        "Usage": "getRelays", 
        "Example": "getRelays",
        "Description": "List all the relays attached to an account"
    },
    "moveRelayToAccount": {
        "Usage": "moveRelayToAccount {relayID} {accountID} {pairing code}", 
        "Example": "moveRelayToAccount WDRL000003 d55fa29dbad3418883374168ba4791fd AN2XZWQ8R3AS6U7B8XGB6Q8MP",
        "Description": "move a relay to an account"
    },
    "moveRelayToSite": {
        "Usage": "moveRelayToSite [relayID] [siteID] [pairing code]", 
        "Example": "moveRelayToSite WDRL000003 b34c748c4adb4f72b56b213e14161992 AN2XZWQ8R3AS6U7B8XGB6Q8MP",
        "Description": "move relay to a site"
    },
    "listSiteResources": {
        "Usage": "listSiteResources", 
        "Example": "listSiteResources",
        "Description": "list all the resources attached to a site"
    },
    "forgetSiteResource": {
        "Usage": "forgetSiteResource {resourceID}", 
        "Example": "forgetSiteResource WWFL00022Q",
        "Description": "used to delete or unpair a device from the relay"
    },
    "getSiteResourceState": {
        "Usage": "getSiteResourceState {resourceID}", 
        "Example": "getSiteResourceState ZW010f200108015",
        "Description": "gives the state of a resources"
    },
    "updateSiteResourceState": {
        "Usage": "updateSiteResourceState {resourceID} {resource state} {value}", 
        "Example": "updateSiteResourceState VirtualLightBulb1110 power off",
        "Description": "updates the state of a resource"
    },
    "getResponse": {
        "Usage": "getResponse {request ID}", 
        "Example":"getResponse fbewiufvwif212",
        "Description": "gives responce of given request Id"
    },
    "createSite": {
        "Usage": "createSite", 
        "Example": "createSite",
        "Description": "it creates a new site"
    },
    "getSites": {
        "Usage": "getSites", 
        "Example": "getSites",
        "Description": "it gives a object with all the sites in an account with its info"
    },
    "updateSite": {
        "Usage": "updateSite {boolan value (true/false)} {update}", 
        "Example": "updateSite true hdsvfehjfjbdejwk",
        "Description": "updates a site"
    },
    "deleteSite": {
        "Usage": "deleteSite {siteID to be deleted}", 
        "Example": "deleteSite d3e3hvfkjbe3fi3bfkjb",
        "Description": "delete a site"
    },
    "getSiteinterfaces": {
        "Usage": "getSiteinterfaces", 
        "Example": "getSiteinterfaces",
        "Description": "list all the interface of deviceJS"
    },
    "getSiteresourcetypes": {
        "Usage": "getSiteresourcetypes", 
        "Example": "getSiteresourcetypes",
        "Description": "it list all the respource type to the relay"
    },
    "getAccounts": {
        "Usage": "getAccounts", 
        "Example": "getAccounts",
        "Description": "list all accountID to the cloud"
    },
    "getAccountsExt": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "postSchedule": {
        "Usage": "postSchedule {object of schedule}", 
        "Example": "postSchedule {json object}",
        "Description": "Update a Schedule"
    },
    "getSchedules": {
        "Usage": "getSchedules", 
        "Example": "getSchedules",
        "Description": "get all posted schedule"
    },
    "getaSchedule": {
        "Usage": "getaSchedule {scheduleID}", 
        "Example":"etaSchedule ewvewihfveiflivf",
        "Description": "return a schedule related to the scheduleID"
    },
    "putSchedule": {
        "Usage": "putSchedule {scheduleid} {JSON string for schedule}", 
        "Example": "putSchedule 0da2dfbad58249e2a15eda4fa22c0712 {json object}",
        "Description": ""
    },
    "deleteSchedule": {
        "Usage": "deleteSchedule {scheduleid}", 
        "Example":"deleteSchedule f77625ea653e4273b6b94990c22573ed",
        "Description": "Delete a schedule at a site"
    },
    "getUsers": {
        "Usage": "getUsers", 
        "Example": "getUsers",
        "Description": "List and iterate through users within an account. An administrator will be able to list all users"
    },
    "getUserinfo": {
        "Usage": "Userinfo {userid}", 
        "Example": "getUserinfo 65c3cc0b46ed4ee0ad03c63cc7870107",
        "Description": "get information about a user"
    },
    "executeSiteResourceCommand": {
        "Usage": "executeSiteResourceCommand [deviceID] [command] [argument]", 
        "Example": "executeSiteResourceCommand id=anydeviceID emit 900,90,400",
        "Description": "Emit events for the device run getSiteResourceState to verify."
    },
    "getDiagnostics": {
        "Usage": "getDiagnostics {-s}", 
        "Example": "getDiagnostics -s",
        "Description": "gives helth info of the relay"
    },
    "VirtualDeviceStopPeriodicEvents": {
        "Usage": "VirtualDeviceStopPeriodicEvents", 
        "Example": "VirtualDeviceStopPeriodicEvents",
        "Description": "stops all periodic events for virtual devices"
    },
    "VirtualDeviceGeneratePeriodicEvents": {
        "Usage": "VirtualDeviceGeneratePeriodicEvents", 
        "Example": "VirtualDeviceGeneratePeriodicEvents",
        "Description": "start all periodic events for virtual devices"
    },
    "createUserAccessRule": {
        "Usage": "createUserAccessRule} {user email} {JSON string for rule}",
        "Example":"",
        "Description": " Run to give permission to other account"
    },
    "putImage": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "getImage": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "createApp": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "publishApp": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "listApps": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "bacnetListDevices": {
        "Usage": "bacnetListDevices", 
        "Example": "bacnetListDevices",
        "Description": "List bacnet device with its specification"
    },
    "bacnetWhoHas": {
        "Usage": "bacnetWhoHas {ObjectType} {ObjectInstance", 
        "Example": "bacnetWhoHas 4 1",
        "Description": "returs Instace details of the "
    },
    "bacnetReadProperty": {
        "Usage": "bacnetReadProperty [DeviceId] [ObjectType] [ObjectInstance] [ObjectProperty]", 
        "Example": "bacnetReadProperty 1 4 1 28",
        "Description": "return Property of bacnet"
    },
    "bacnetWriteProperty": {
        "Usage": "bacnetWriteProperty [DeviceId] [ObjectType] [ObjectInstance] [ObjectProperty] [PropertyIndex (use 0xFFFFFFFF)] [DataType] [Priority] [Value]", 
        "Example": "bacnetWriteProperty 1 4 1 0xFFFFFFFF 7 8 anyValue",
        "Description": "write a property of bacnet"
    },
    "bacnetRelinquishAll": {
        "Usage": "bacnetRelinquishAll [Interface/Facade] [Priority] [ReliniquishDefaultTextValue]", 
        "Example":" bacnetRelinquishAll Facades/Switchable 8 off",
        "Description": "change a interface of bacnet device"
    },
    "bacnetSetPriority": {
        "Usage": "bacnetSetPriority {Priority value}", 
        "Example": "bacnetSetPriority 8",
        "Description": "set bacnet priority"
    },
    "bacnetRelinquishDefault": {
        "Usage": "bacnetRelinquishDefault {Interface/Facade}", 
        "Example": "bacnetRelinquishDefault Facades/Switchable",
        "Description": "make default settings of a facade"
    },
    "bacnetPriorityArray": {
        "Usage": "bacnetPriorityArray {Interface/Facade}", 
        "Example": "bacnetPriorityArray Facades/Switchable",
        "Description": "return a array of bacnet priority"
    },
    "bacnetStartAll": {
        "Usage": "bacnetStartAll", 
        "Example": "bacnetStartAll",
        "Description": "start all bacnet device connected to the relay"
    },
    "bacnetGetHealth": {
        "Usage": "bacnetGetHealth", 
        "Example": "bacnetGetHealth",
        "Description": "return all its health status"
    },
    "bacnetGetRecipes": {
        "Usage": "bacnetGetRecipes", 
        "Example": "bacnetGetRecipes",
        "Description": "return all bacnet receipes"
    },
    "bacnetLogLevel": {
        "Usage": "bacnetLogLevel {log value}", 
        "Example": "bacnetLogLevel 2",
        "Description": "return vacnet log level"
    },
    "bacnetDeleteRecipes": {
        "Usage": "bacnetDeleteRecipes", 
        "Example": "bacnetDeleteRecipes",
        "Description": "delete all the receipes of bacnet on relay"
    },
    "bacnetSaveRecipe": {
        "Usage": "bacnetSaveRecipe {location of the bacnet receipes}", 
        "Example": "bacnetSaveRecipe /location_of_receipies.json",
        "Description": "save bacnet receipes"
    },
    "getAllResourceStates": {
        "Usage": "getAllResourceStates", 
        "Example": "getAllResourceStates",
        "Description": "return state of each resource"
    },
    "zwaveRemoveDevice": {
        "Usage": "zwaveRemoveDevice", 
        "Example": "zwaveRemoveDevice",
        "Description": "remove zwave devices"
    },
    "renameDevice": {
        "Usage": "renameDevice [resourceID] [Name]", 
        "Example": "renameDevice VirtualThermostat1 'Kitchen Thermostat'",
        "Description": "rename any"
    },
    "getAllDeviceNames": {
        "Usage": "getAllDeviceNames", 
        "Example": "getAllDeviceNames",
        "Description": "return get all devices name"
    },
    "getSitedatabase": {
        "Usage": "getSitedatabase", 
        "Example": "getSitedatabase",
        "Description": "return all the database of the site"
    },
    "getSitebuckets": {
        "Usage": "getSitebuckets {getSitedatabase}", 
        "Example": "getSitebuckets lww",
        "Description": "return site bucket of the site database"
    },
    "getKeysdata": {
        "Usage": "",
        "Example": "",
        "Description": ""
    },
    "updateKeys": {
        "Usage": "",
        "Example": "",
        "Description": ""
    },
    "updateSiteResourceName": {
        "Usage": "updateSiteResourceName", 
        "Example": "updateSiteResourceName VirtualLightBulb1110 LightBulb",
        "Description": "updates the name of a device"
    },
    "zigbeeGetPanId": {
        "Usage": "zigbeeGetPanId", 
        "Example": "zigbeeGetPanId",
        "Description": "returns pan ID of zigbee device"
    },
    "zigbeeDeleteAll": {
        "Usage": "zigbeeDeleteAll", 
        "Example": "zigbeeDeleteAll",
        "Description": "delete all the zigbee network"
    },
    "zigbeeGetChannel": {
        "Usage": "zigbeeGetChannel", 
        "Example": "zigbeeGetChannel",
        "Description": "return channel of the zigbee device"
    },
    "zigbeeNetworkTopology": {
        "Usage": "zigbeeNetworkTopology", 
        "Example": "zigbeeNetworkTopology",
        "Description": "return network topology of zigbee devices"
    },
    "zigbeeStatus": {
        "Usage": "zigbeeStatus", 
        "Example": "zigbeeStatus",
        "Description": "return status of zigbee device"
    },
    "zigbeeGetAddress": {
        "Usage": "zigbeeGetAddress", 
        "Example": "zigbeeGetAddress",
        "Description": "gives addrss of zigbee devices "
    },
    "zigbeeNodes": {
        "Usage": "zigbeeNodes", 
        "Example": "zigbeeNodes",
        "Description": "return node of zigbee devices"
    },
    "zigbeePingDevices": {
        "Usage": "zigbeePingDevices", 
        "Example": "zigbeePingDevices",
        "Description": "ping all the zigbee device connected to the relay"
    },
    "zigbeeLogLevel": {
        "Usage": "zigbeeLogLevel {log value}", 
        "Example": "zigbeeLogLevel 2",
        "Description": "return log level of zigbee device"
    },
    "enoceanStartPairing": {
        "Usage": "enoceanStartPairing", 
        "Example":"enoceanStartPairing",
        "Description": "add a enocean device"
    },
    "enoceanRemoveDevice": {
        "Usage": "enoceanRemoveDevice", 
        "Example": "enoceanRemoveDevice",
        "Description": "remove a enocean device"
    },
    "enoceanLogLevel": {
        "Usage": "enoceanLogLevel {log value from 1 to 5}", 
        "Example": "enoceanLogLevel 2",
        "Description": "return log level of enocean device"
    },
    "enoceanConfig": {
        "Usage": "enoceanConfig", 
        "Example": "enoceanConfig",
        "Description": "return configuration of enocean"
    },
    "enoceanGetBase": {
        "Usage": "enoceanGetBase", 
        "Example": "enoceanGetBase",
        "Description": "return bas of enocean device"
    },
    "enoceanGetVersion": {
        "Usage": "enoceanGetVersion", 
        "Example": "enoceanGetVersion",
        "Description": "return the version of enocean"
    },
    "removeRelayFromAccount": {
        "Usage": "removeRelayFromAccount {relayID} {pairingcode{optional}}", 
        "Example": "removeRelayFromAccount WLDR0000 WICJ2KYMTNCMTF760E6Z2GPXS",
        "Description": "removes a relay from account"
    },
    "debug": {
        "Usage": "debug {on/off}", 
        "Example":"debug on",
        "Description": "Turn debug output on or off"
    },
    "info": {
        "Usage": "info", 
        "Example": "info",
        "Description": "gives the info of current account"
    },
    "metrics": {
        "Usage": "metrics {on/off}", 
        "Example": "metrics on",
        "Description": "Turns on output showing performance of API calls."
    },
    "login": {
        "Usage": "login {user} {password}", 
        "Example": "login ygoyal+wwdev1@wigwag.com passXYZ",
        "Description": "login as other user"
    },
    "histrory": {
        "Usage": "history", 
        "Example": "history",
        "Description": "return all command histroy"
    },
    "shell": {
        "Usage": "node index.js -c [cloud] -u [userId] -p [password] -a [account Id] -s [siteId] shell",
        "Example":"",
        "Description":"enable shell to run command"
    },
    "version": {
        "Usage": "version",
        "Example":"",
        "Description": "print version of etool"
    },
    "exit": {
        "Usage": "exit",
        "Example":"",
        "Description": "exit from etool"
    },
    "modbusDeleteDevice": {
        "Usage": "modbusDeleteDevice {modbusdeviceID}",
        "Example":"",
        "Description": "delete a modbus device"
    },
    "modbusResetUSB": {
        "Usage": "modbusResetUSB", 
        "Example": "modbusResetUSB",
        "Description": "reset modbus USB"
    },
    "resetImod6": {
        "Usage": "resetImod6", 
        "Example": "resetImod6",
        "Description": "reset Imod6 device"
    },
    "programImod6": {
        "Usage": "programImod6 {hex file path}", 
        "Example": "programImod6 /location of hex file.txt",
        "Description": "Program Imod6 device"
    },
    "executeBash": {
        "Usage": "executeBash {location for relay state}", 
        "Example": "executeBash '/etc/init.d/devjssupport start'",
        "Description": "fix relay connection"
    },
    "createsitesWithNames": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "deletesitesWithNames": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "siteMap": {
        "Usage":"siteMap", 
        "Example":"",
        "Description": "list all the sites with there status and group"
    },
    "getSiteInfo": {
        "Usage": "getSiteInfo", 
        "Example": "getSiteInfo",
        "Description": "Returns all info of current site"
    },
    "siteName": {
        "Usage": "siteName", 
        "Example": "siteName",
        "Description": "name the current site"
    },
    "renameSite": {
        "Usage": "renameSite [site name to be given]", 
        "Example": "renameSite store-XYZ ",
        "Description": "rename the current site"
    },
    "renameAccount": {
        "Usage": "Usage: renameAccount {Name} {accountID", 
        "Example": "renameAccount 'Super Manager' 556565656566",
        "Description": "rename account"
    },
    "getRelay": {
        "Usage":  "getRelay {relayID}", 
        "Example":"getRela WWRL000000X",
        "Description": "return relay of given ID"
    },
    "modbusListResourcesInCloud": {
        "Usage": "modbusListResourcesInCloud", 
        "Example": "modbusListResourcesInCloud",
        "Description": "List all modbus resources in cloud"
    },
    "bacnetListResourcesInCloud": {
        "Usage": "bacnetListResourcesInCloud", 
        "Example": "bacnetListResourcesInCloud",
        "Description": "List all bacnet resources in cloud"
    },
    "6lowpanListResourcesInCloud": {
        "Usage": "6lowpanListResourcesInCloud", 
        "Example":"6lowpanListResourcesInCloud",
        "Description": "List all 6lowpan resources in cloud"
    },
    "zigbeeListResourcesInCloud": {
        "Usage": "zigbeeListResourcesInCloud", 
        "Example":"zigbeeListResourcesInCloud",
        "Description": "List all zigbee resources in cloud"
    },
    "zwaveListResourcesInCloud": {
        "Usage": "zwaveListResourcesInCloud",
        "Example": "zwaveListResourcesInCloud",
        "Description": "List all zwave resources in cloud"
    },
    "enoceanListResourcesInCloud": {
        "Usage": "enoceanListResourcesInCloud",
        "Example": "enoceanListResourcesInCloud",
        "Description": "List all enocean resources in cloud"
    },
    "updateDevStateManagerForDevice": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "deleteSchedulesAll": {
        "Usage": "deleteSchedulesAll", 
        "Example": "deleteSchedulesAll",
        "Description": "delete all the schedules"
    },
    "VirtualDeviceLogLevel": {
        "Usage": "VirtualDeviceLogLevel [log value]", 
        "Example": "VirtualDeviceLogLevel 2",
        "Description": "command will generate periodic events for all the registered Virtual Devices"
    },
    "bacnetNativeLogLevel": {
        "Usage": "bacnetNativeLogLevel", 
        "Example":"",
        "Description": "command will generate periodic events for bacnet device"
    },
    "bacnetStartPortal": {
        "Usage": "bacnetStartPortal", 
        "Example":"",
        "Description": "restart the bacnet device wnad start portal"
    },
    "saveDevState": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "getUserAccessRules": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "getaUserAccessRule": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "deleteUserAccessRule": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "createRelayConfig": {
        "Usage": "createRelayConfig [configuration in json]",
        "Example":"",
        "Description": "Create a relay configuration"
    },
    "applyRelayConfig": {
        "Usage": "applyRelayConfig [name] [relayID] [configID] [params]",
        "Example":"",
        "Description": "Apply a relay configuration"
    },
    "listRelayConfigs": {
        "Usage": "listRelayConfigs", 
        "Example": "listRelayConfigs",
        "Description": "List all the relay configs"
    },
    "getRelayTask": {
        "Usage": "getRelayTask [task Id]", 
        "Example": "getRelayTask fbewiufvliewhfv",
        "Description": "Returns a task with the given task ID"
    },
    "importRelay": {
        "Usage": "importRelay [relayID] [pairingcode]", 
        "Example": "importRelay WWRL000000X fgewigfvbeifbcki",
        "Description": "Import a relay in account to pair"
    },
    "importRelays": {
        "Usage": "importRelays [location of csv file]", 
        "Example": "importRelays /location of file.csv",
        "Description": "Import a betch of relay from a .csv file"
    },
    "updateRelay": {
        "Usage": "updateRelay [relayID] [latitude] [longitude]", 
        "Example": "updateRelay WWRL000000X 78 23",
        "Description": "Updates coordinates of a relay"
    },
    "bindRelayToExistingSite": {
        "Usage": "bindRelayToExistingSite", 
        "Example": "bindRelayToExistingSite",
        "Description": "Bind a relay to an existing site"
    },
    "bindRelayToSite": {
        "Usage": "bindRelayToSite", 
        "Example": "bindRelayToSite",
        "Description": "bind a relay to a new site"
    },
    "subscribeToEvents": {
        "Usage": "subscribeToEvents", 
        "Example": "subscribeToEvents",
        "Description": "Create a websocket to show all the events"
    },
    "getAlerts": {
        "Usage": "getAlerts [limit(optional)] [order (optional)] [beforeTime(optional)]", 
        "Example": "getAlerts 50 desc 1526154157891",
        "Description": "Returns all the Alerts to the site"
    },
    "getAnAlert": {
        "Usage": "getAnAlert [relayID] [Alert Serial Number]", 
        "Example": "getAnAlert WWRL000000X fygerfg98437tr43c39g",
        "Description": "Return an alert with the given serila number"
    },
    "dismissAlert": {
        "Usage": "dismissAlert [relayID] [Alert Serial Number]", 
        "Example": "dismissAlert WWRL000000X fygerfg98437tr43c39g",
        "Description": "Delete an alert"
    },
    "getDeviceLogs": {
        "Usage": "getDeviceLogs [relayID] [deviceID] [state] [limit] [sort]", 
        "Example": "getDeviceLogs WDRL00000P VirtualLightBulb61 state-power 4 desc",
        "Description": "to get the logs of a device"
    },
    "getBleScanResults": {
        "Usage": "",
        "Example":"",
        "Description": ""
    },
    "bleStartScan": {
        "Usage": "",
        "Example": "",
        "Description": ""
    },
    "bleStopScan": {
        "Usage": "",
        "Example": "",
        "Description": ""
    }
}